import { useMemo, useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { UserButton, useAuth } from "@clerk/nextjs";
import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from "@tanstack/react-table";
import clsx from "clsx";

import { type Visit } from "@acme/db";

import { IndeterminateCheckbox } from "~/components/IndeterminateCheckbox";
import { api } from "../utils/api";

const Home: NextPage = () => {
  const { data: visits, refetch } = api.visit.all.useQuery();

  // const [rowSelection, setRowSelection] = useState({});
  // const selectedVisitIds = useMemo(
  //   () =>
  //   visits
  //       .filter((visits, index) =>
  //         Object.keys(rowSelection).includes(index.toString()),
  //       )
  //       .map((visit) => visit.id),
  //   [visits, rowSelection],
  // );

  const columnHelper = createColumnHelper<Visit>();
  const columns = [
    columnHelper.accessor("createdAt", {
      header: () => (
        <div className="border-gray-secondary flex h-8 w-auto items-center border-b border-l px-5 text-left font-medium text-black/30">
          Вошёл
        </div>
      ),
      cell: (info) => (
        <div className="border-gray w-auto border-0 border-b border-l px-5 py-3 text-sm text-black">
          {info.getValue().toLocaleTimeString()}
        </div>
      ),
    }),
    columnHelper.accessor("exitedAt", {
      header: () => (
        <div className="border-gray-secondary flex h-8 w-auto items-center border-b border-l px-5 text-left font-medium text-black/30">
          ВЫшел
        </div>
      ),
      cell: (info) => (
        <div className="border-gray w-auto border-0 border-b border-l px-5 py-3 text-sm text-black">
          {info.getValue()?.toLocaleTimeString() ?? "-"}
        </div>
      ),
    }),
  ];

  const table = useReactTable({
    data: visits ?? [],
    columns,
    getCoreRowModel: getCoreRowModel(),
  });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen flex-col items-center bg-black text-white">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-8">
          <h1 className="text-5xl font-extrabold tracking-tight sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> Turbo
          </h1>
          <AuthShowcase />
        </div>
        <div className="w-full grow bg-white">
          <div className="border-gray-secondary h-fit w-[80vw] overflow-clip rounded-xl border ">
            <table className="-mb-1 w-full table-fixed border-collapse overflow-x-auto">
              <thead>
                {table.getHeaderGroups().map((headerGroup) => (
                  <tr key={headerGroup.id}>
                    {headerGroup.headers.map((header) => (
                      <th
                        key={header.id}
                        colSpan={header.colSpan}
                        className={clsx("p-0", "w-auto")}
                      >
                        {header.isPlaceholder
                          ? null
                          : flexRender(
                              header.column.columnDef.header,
                              header.getContext(),
                            )}
                      </th>
                    ))}
                  </tr>
                ))}
              </thead>
              <tbody>
                {table.getRowModel().rows.map((row) => (
                  <tr key={row.id}>
                    {row.getVisibleCells().map((cell) => (
                      <td key={cell.id} className={clsx("p-0")}>
                        {flexRender(
                          cell.column.columnDef.cell,
                          cell.getContext(),
                        )}
                      </td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { isSignedIn } = useAuth();
  const { data: secretMessage } = api.auth.getSecretMessage.useQuery(
    undefined,
    { enabled: !!isSignedIn },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      {isSignedIn && (
        <>
          <p className="text-center text-2xl text-white">
            {secretMessage && (
              <span>
                {" "}
                {secretMessage} click the user button!
                <br />
              </span>
            )}
          </p>
          <div className="flex items-center justify-center">
            <UserButton
              appearance={{
                elements: {
                  userButtonAvatarBox: {
                    width: "3rem",
                    height: "3rem",
                  },
                },
              }}
            />
          </div>
        </>
      )}
      {!isSignedIn && (
        <p className="text-center text-2xl text-white">
          <Link href="/sign-in">Sign In</Link>
        </p>
      )}
    </div>
  );
};
